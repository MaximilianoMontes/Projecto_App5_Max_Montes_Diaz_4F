@page "/vehiculo"
@rendermode InteractiveServer
@inject NavigationManager _navigator;
@inject IRepositorioVehiculo _repositorio

<h2>RentAcar Vehiculo</h2>

<button type="button" class="btn btn-primary" @onclick="Agregar" @onclick:preventDefault>Agregar</button>

@if (Vehiculon == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else if (Vehiculon.Count == 0)
{
    <h3>No hay Vehiculos</h3>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Tipo</th>
                <th>Modelo</th>
                <th>Placa</th>
                <th>Tarifa</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Vehiculos vehiculos in Vehiculon)
            {
                <tr>
                    <td>@vehiculos.Tipo</td>
                    <td>@vehiculos.Modelo</td>
                    <td>@vehiculos.Placa</td>
                    <td>@vehiculos.Tarifa</td>

                    <td>
                        <button class="btn btn-danger" @onclick="() => Eliminar(vehiculos)">Eliminar</button>
                        <button class="btn btn-secondary" @onclick="() => Modificar(vehiculos.Id)">Modificar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Vehiculos>? Vehiculon;

    protected override async Task OnInitializedAsync()
    {
        Vehiculon = await _repositorio.GetAll();
    }

    private async void Eliminar(Vehiculos vehiculos)
    {
        await _repositorio.Delete(vehiculos.Id);
        vehiculos!.Remove(vehiculos);
        StateHasChanged();
    }

    private void Modificar(int id)
    {
        _navigator.NavigateTo($"/vehiculo/editar/{id}");
    }

    private void Agregar()
    {
        _navigator.NavigateTo("/vehiculo/nuevo");
    }
}